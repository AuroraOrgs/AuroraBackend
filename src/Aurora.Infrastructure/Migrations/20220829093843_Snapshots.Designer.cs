// <auto-generated />
using System;
using Aurora.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Aurora.Infrastructure.Migrations
{
    [DbContext(typeof(SearchContext))]
    [Migration("20220829093843_Snapshots")]
    partial class Snapshots
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Aurora.Application.Entities.SearchRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("ContentType")
                        .HasColumnType("integer");

                    b.Property<int>("OccurredCount")
                        .HasColumnType("integer");

                    b.Property<string>("SearchTerm")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Website")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SearchTerm", "Website", "ContentType")
                        .IsUnique();

                    b.ToTable("Request");
                });

            modelBuilder.Entity("Aurora.Application.Entities.SearchRequestQueueItem", b =>
                {
                    b.Property<Guid>("QueueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("QueuedTimeUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("SearchRequestId")
                        .HasColumnType("uuid");

                    b.HasKey("QueueId");

                    b.HasIndex("SearchRequestId");

                    b.ToTable("Queue");
                });

            modelBuilder.Entity("Aurora.Application.Entities.SearchRequestSnapshot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("SearchRequestId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("SearchRequestId");

                    b.ToTable("Snapshots");
                });

            modelBuilder.Entity("Aurora.Application.Entities.SearchResult", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AdditionalData")
                        .HasColumnType("text");

                    b.Property<DateTime>("FoundTimeUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ImagePreviewUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SearchItemUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SearchRequestSnapshotId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SearchRequestSnapshotId");

                    b.ToTable("Result");
                });

            modelBuilder.Entity("Aurora.Application.Entities.SearchRequestQueueItem", b =>
                {
                    b.HasOne("Aurora.Application.Entities.SearchRequest", "SearchRequest")
                        .WithMany("QueueItems")
                        .HasForeignKey("SearchRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SearchRequest");
                });

            modelBuilder.Entity("Aurora.Application.Entities.SearchRequestSnapshot", b =>
                {
                    b.HasOne("Aurora.Application.Entities.SearchRequest", "SearchRequest")
                        .WithMany("Snapshots")
                        .HasForeignKey("SearchRequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SearchRequest");
                });

            modelBuilder.Entity("Aurora.Application.Entities.SearchResult", b =>
                {
                    b.HasOne("Aurora.Application.Entities.SearchRequestSnapshot", "SearchRequestSnapshot")
                        .WithMany()
                        .HasForeignKey("SearchRequestSnapshotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SearchRequestSnapshot");
                });

            modelBuilder.Entity("Aurora.Application.Entities.SearchRequest", b =>
                {
                    b.Navigation("QueueItems");

                    b.Navigation("Snapshots");
                });
#pragma warning restore 612, 618
        }
    }
}
